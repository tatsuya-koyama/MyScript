#!/usr/bin/perl

=head1 NAME

godeye --- ver.0.1 --- wrote by Tatsuya Koyama --- 2011-06-14

=head1 SYNOPSIS

 [USAGE]
    godeye [-d] [-a] [-l level] [-f] [-c column] [-h height] [-b length] [-m]

 [OPTIONS]
    -d       : ディレクトリのみ表示
    -a       : ドットから始まる隠しファイルも表示
    -l level : 指定した深さまでしか表示しない
    -f       : ディレクトリの末尾に、(直下のファイル数 / 下の総ファイル数) を表示
    -c column: カラム数を指定
    -h height: 基準の表示縦幅を設定
    -b length: 枝の長さ（デフォルト 3）
    -m       : ファイルサイズ [MB] を表示
    --help   : ヘルプを表示

=head1 DESCRIPTION

色付きの tree を表示する。
まあ tree -F -C --charset ascii で十分なんだけど、
ディレクトリレベルに対して色付けしたり、マルチカラムで表示したりしてみたかったので
カッとなって書いてしまったやっつけスクリプト。
=cut

use strict;
use warnings;
use utf8;
use Getopt::Long;
use Pod::Usage;
use File::Basename;
use File::Find;
use File::Path;
use Term::ReadKey;

GetOptions( \my %opt, qw/d a l:i f c:i h:i b:i m help/ );
pod2usage(-verbose => 99, -sections => "SYNOPSIS|DESCRIPTION") if $opt{help};
my $startDir = $ARGV[0] || "./";
$startDir =~ s(\/$)();
unless (-d $startDir) {
	print "sorry, [$startDir] is not directory.\n";
	exit;
}

#---------- working memory
my ($termWidth, $termHeight) = GetTerminalSize();
my @fileInfoList = ();
my $maxDirLv     = 0;
my $maxLength    = 0;
my $countDir     = 0;
my $countFile    = 0;

#---------- parameters
my $branchLength = $opt{b} || 3;
my $columnMargin = 4;
my $minHeight    = $termHeight - 9; #----- 最低でもこれ以上の高さになるように表示

$minHeight = 20 if ($minHeight < 20);
if ($opt{h}) { $minHeight = $opt{h} || 20; }


print "target directory: $startDir\n";
putLine();

#---------- get file tree
File::Find::find( \&setFileName, $startDir );
sub setFileName {
	++$countDir  if -d $_;
	++$countFile if -f $_;
	return if ( $opt{d}  &&  -f $_);
	
	my $fileName = $File::Find::name;
	$fileName =~ s(^${startDir}\/?)();
	if (!$opt{a}  &&  ($fileName =~ /^\./  ||  $fileName =~ /\/\./)) {
		$File::Find::prune = 1;
		return;
	}
	
	my $dirLevel = getDirLevel( $fileName );
	$maxDirLv = $dirLevel if ($maxDirLv < $dirLevel);
	if ($opt{l}  &&  $dirLevel >= $opt{l}) {
		$File::Find::prune = 1;
		return;
	}
	
	my $isDir = (-d $_);
	my $numOwnFile  = 0;
	my $numOwnFileR = 0;
	if ($opt{f}  &&  $isDir) {
		$numOwnFile  = int(`find $_ -type f -maxdepth 1 | wc -l`);
		$numOwnFileR = int(`find $_ | wc -l`) - 1;
	}
	push @fileInfoList, +{
		name  => $_,
		path  => $fileName,
		lv    => $dirLevel,
		dir   => $isDir,
		tail  => '',
		show  => 0,
		file  => $numOwnFile,
		fileR => $numOwnFileR,
	};
}

#---------- set info to make pretty branch
my $appearFlgs = {};
for my $i (reverse @fileInfoList) {
	my $f = $appearFlgs;
	unless ($f->{ $i->{lv} }) {$i->{tail} = 1;}
	$f->{ $i->{lv} } = 1;
	$i->{show} = flgsToInt( $appearFlgs );
	
	for (my $lv = $i->{lv}+1;  $lv <= $maxDirLv;  $lv++) {
		if ($f->{$lv}) {$f->{$lv} = 0;}
	}
}

#---------- set output results
my @lines = ();
for my $file (@fileInfoList) {
	my $colorLine = '';
	my $plainLine = ''; #----- to count pure text length
	$colorLine .= getColorCode();
	
	for (my $lv = 0;  $lv < $file->{lv};  $lv++) {
		$colorLine .= getColorCodeWithNumber( $lv );
		my $branch = ($file->{show} & (1 << $lv)) ? '|' : ' ';
		$branch .= ' ' x $branchLength;
		$colorLine .= $branch;
		$plainLine .= $branch;
	}
	
	$colorLine .= getColorCodeWithNumber( $file->{lv} );
	if ($file->{tail}) {
		$colorLine .= '`' .('-' x $branchLength);
		$plainLine .= '`' .('-' x $branchLength);
	} else {
		$colorLine .= '|' .('-' x $branchLength) if ($file->{name} ne $startDir);
		$plainLine .= '|' .('-' x $branchLength) if ($file->{name} ne $startDir);
	}
	
	$colorLine .= getColorCodeWithNumber( $file->{lv}, 1 ) if $file->{dir};
	$colorLine .= "$file->{name}".($file->{dir} ? '/' : '');
	$plainLine .= "$file->{name}".($file->{dir} ? '/' : '');
	
	# set the numbers of children
	if ($opt{f}  &&  $file->{dir}) {
		$colorLine .= getColorCodeWithNumber( $file->{lv}, 0 );
		$colorLine .= " ($file->{file}/$file->{fileR})";
		$plainLine .= " ($file->{file}/$file->{fileR})";
	}
	
	# set file size [MB]
	if ($opt{m}) {
		my $fileSize = getFileSizeStat($file);
		$colorLine .= getColorCodeWithNumber( $file->{lv}, 0 );
		$colorLine .= "***  $fileSize MB";
		$plainLine .= "***  $fileSize MB";
	}
	
	my $lineLength = length($plainLine);
	push @lines, +{ text => $colorLine, len => $lineLength };
	$maxLength = $lineLength if ($maxLength < $lineLength);
}

#---------- set the number of columns
my $numCol = 1;
my $numLine = scalar(@lines);
if ($opt{c}) {
	$numCol = $opt{c} || 1;
}
elsif ($numLine > $minHeight) {
	$numCol = int($termWidth / ($maxLength + $columnMargin)) || 1;
	--$numCol while ($numCol > 1  &&  $numLine / ($numCol-1) < $minHeight);
}

#---------- display colorful tree in multi columns
my $offset = int( $numLine / $numCol );
$offset += 1 if ($offset * $numCol < $numLine);

for (my $i=0;  $i < $offset;  $i++) {
	
	my $prevLine;
	for (my $c=0;  $c < $numCol;  $c++) {
		my $line = $lines[ ($offset * $c) + $i ];
		next unless $line;
		if ($c == 0) {
			print $line->{text};
		} else {
			my $spaceWidth = ($columnMargin + $maxLength - $prevLine->{len});
			print ''.(' ' x $spaceWidth).$line->{text};
		}
		$prevLine = $line;
	}
	print "\n";
}

#---------- display info
print getColorCode();
print "\n$countDir directories, $countFile files\n";

#---------- functions
#-------------------------------------------------------------------------------
sub putLine {
	my ($termWidth, $termHeight) = GetTerminalSize();
	print '-' x ($termWidth - 1), "\n";
}

#-------------------------------------------------------------------------------
sub getDirLevel {
	my ($fileName) = @_;
	my $dirLevel = $fileName;
	$dirLevel = ($dirLevel =~ s(\/)()g) || 0;
}

#-------------------------------------------------------------------------------
sub flgsToInt {
	my ($flgs) = @_;
	my $result = 0;
	for my $i (keys %$flgs) {
		if ($flgs->{$i}) {$result += (1 << $i);}
	}
	return $result;
}

#-------------------------------------------------------------------------------
sub getFileSizeStat {
	my ($file) = @_;
	my $fullPath = "${startDir}/$file->{path}";
	$fullPath    =~ s/ /\\ /g;  # escape space
	my $du       = `du -sk "${startDir}/$file->{path}"`;
	my $fileSize = 0;
	if ($du =~ /^(\d*)/) {
		$fileSize = $1 / 1000;  # MB
	}
	return $fileSize;
}

#-------------------------------------------------------------------------------
sub getColorCode {
	my ($colorName) = @_;
	unless ($colorName) {
		return "\033[0m"; #Default color
	}
	
	my $colors = +{
		red    => 31,
		green  => 32,
		yellow => 33,
		blue   => 34,
		purple => 35,
		cyan   => 36,
	};
	my $colorCode = $colors->{ $colorName };
	return "\033[0;${colorCode}m";
}

#-------------------------------------------------------------------------------
sub getColorCodeWithNumber {
	my ($num, $bright) = @_;
	my @colors = (0, 34, 33, 31, 32, 35, 36);
	my $colorCode = $colors[ $num % scalar(@colors) ];
	unless ($colorCode) {
		return "\033[0m"; #Default color
	}
	return ($bright)
		? "\033[1;${colorCode}m"
		: "\033[0;${colorCode}m";
}

